// for a period tracking app .. what should be my database looks like 
-----------------------------
const dailyCycleInsightsSchema = new Schema<IDailyCycleInsights>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: [true, 'User Id is required'],
    },

    labTestLogId: {
      type: Schema.Types.ObjectId,
      ref: 'LabTestLog',
      required: [true, 'User Id is required'],
    },
    menstrualFlow: {
      type: String,
      enum: [
        TMenstrualFlow.light,
        TMenstrualFlow.medium,
        TMenstrualFlow.heavy,
        TMenstrualFlow.spotting,
        TMenstrualFlow.no,
      ],
      required: [
        false,
        Menstrual flow is not required it can be ${Object.values(
          TMenstrualFlow
        ).join(', ')},
      ],
    },
    mood: {
      type: String,
      enum: [
        TMood.great,
        TMood.good,
        TMood.relaxed,
        TMood.happy,
        TMood.irritable,
        TMood.indifferent,
      ],
      required: [
        false,
        mood is not required it can be ${Object.values(TMood).join(', ')},
      ],
    },
    activity: {
      type: String,
      enum: [TActivity.intercourse, TActivity.insemination],
      required: [
        false,
        activity is not required it can be ${Object.values(TActivity).join(
          ', '
        )},
      ],
    },
    symptoms: {
      type: [String],
      enum: [
        TSymptoms.cramps,
        TSymptoms.headache,
        TSymptoms.backache,
        TSymptoms.breastTenderness,
        TSymptoms.cervicalMucous,
        TSymptoms.pain,
        TSymptoms.bloating,
        TSymptoms.others,
      ],
      required: [
        false,
        symptoms is not required it can be ${Object.values(TSymptoms).join(
          ', '
        )},
      ],
    },
    phase: {
      // auto calculate .. or chinta korte hobe ..
      type: String,
      enum: [
        TPhase.menstrual,
        TPhase.follicular,
        TPhase.ovulatory,
        TPhase.luteal,
      ],
      required: [
        false,
        phase is not required it can be ${Object.values(TPhase).join(', ')},
      ],
    },
    fertilityLevel: {
      type: String,
      enum: [
        TFertilityLevel.veryHigh,
        TFertilityLevel.medium,
        TFertilityLevel.low,
        TFertilityLevel.veryLow,
      ],
      required: [
        false,
        fertilityLevel is not required it can be ${Object.values(
          TFertilityLevel
        ).join(', ')},
      ],
    },
    cycleDay: {
      type: Number,
      required: [false, 'cycleDay is not required'],
    },
    cervicalMucus: {
      type: String,
      enum: [TCervicalMucus.eggWhite, TCervicalMucus.creamy],
      required: [
        false,
        cervicalMucus is not required it can be ${Object.values(
          TCervicalMucus
        ).join(', ')},
      ],
    },
    date: {
      type: Date,
      required: [true, 'date is required'],
    },
  },
  { timestamps: true }
);

----------------------------
const labTestLogSchema = new Schema<ILabTestLog>(
  {
    follicleStimulatingHormoneTest: {
      type: String,
      required: [false, 'follicleStimulatingHormoneTest is required'],
    },
    luteinizingHormoneTest: {
      type: String,
      required: [false, 'luteinizingHormoneTest is required'],
    },
    estradiolTest: {
      type: String,
      required: [false, 'estradiolTest is required'],
    },
    progesteroneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    antiMullerianHormoneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    thyroidStimulatingHormoneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    prolactinTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    isDeleted: {
      type: Boolean,
      required: [false, 'isDeleted is not required'],
      default: false,
    },
  },
  { timestamps: true }
);

---------------------------------------------
const personalizeJourneySchema = new Schema<IPersonalizeJourney>(
  {
    dateOfBirth: {
      type : Date,
      required : [true, 'dateOfBirth is required']
    },

    // ðŸ”¥ dateOfBirth er upor base kore age calculate korte hobe .. 
    age : {
      type : Number,
      required : [true, 'age is required']
    },
    height : {
      type : Number,
      required : [true, 'height is required']
    },
    heightUnit : {
      type : String,
      enum : [THeightUnit.cm, THeightUnit.inch],
      required : [true, heightUnit is required it can be ${Object.values(THeightUnit).join(', ')} ]
    },
    weight : {
      type : Number,
      required : [true, 'weight is required']
    },
    weightUnit : {
      type : String,
      enum : [TWeightUnit.kg, TWeightUnit.lbs],
      required : [true, weightUnit is required it can be ${Object.values(THeightUnit).join(', ')} ]
    },

    // --------------------------
    tryingToConceive : {
      type : Boolean,
      required : [true, 'tryingToConceive is required'],
      default : false
    },
    areCyclesRegular : {
      type : Boolean,
      required : [true, 'areCycleRegular is required'],
      default : false
    },
    describeFlow : {
      type : String,
      enum : [
        TDescribeFlow.light,
        TDescribeFlow.normal,
        TDescribeFlow.heavy,
      ],
      required: [
        true,
        describeFlow is required it can be ${Object.values(
          TDescribeFlow
        ).join(', ')},
      ],
    },

    // ---------------------------
    periodStartDate : {
      type: Date,
      required: [true, 'periodStartDate is required'],
    },
    periodLength : {
      type: Number,
      required: [true, 'periodLength is required'],
    },
    periodEndDate : { // ðŸ”¥ this needs to be calculated 
      type: Date,
      required: [false, 'periodEndDate is not required'],
    },

    // --------------------------

    avgMenstrualCycleLength : {
      type: Number,
      required: [true, 'avgMenstrualCycleLength is required'],
    },

    // --------------------------  optional 

    trackOvulationBy : {
      type: [String],
      enum: [
        TTrackOvulationBy.ovulationTests,
        TTrackOvulationBy.basalBodyTemp,
        TTrackOvulationBy.cervicalMucus,
        TTrackOvulationBy.progesteroneTesting,
        TTrackOvulationBy.none
      ],
      required: false
    },
    doYouHavePain : {
      type : String,
      enum : [
        TPainType.mild,
        TPainType.moderate,
        TPainType.severe,
        TPainType.no
      ],
      required: [
        false,
        doYouHavePain is required it can be ${Object.values(
          TPainType
        ).join(', ')},
      ],
    },
    // --------------------------

    expectedPeriodStartDate : { // expectedPeriodDate
      type: Date,
      required: [false, 'expectedPeriodDate is not required'],
    },
    predictedOvulationDate: {  // ðŸ”¥ this needs to be calculated 
      type : Date,
      required: [false, 'predictedOvulationDate is not required'],
    },

    // ðŸ”¥ðŸ”¥ ei duitar jonno  Day gula o save kore rakhte hobe kina .. 

    pregnancy_History_Id: {
      type: Schema.Types.ObjectId,
      ref: 'PregnancyHistory', // Reference to the pregnancyHistory schema
    },
    medical_And_LifeStyle_Id: {
      type: Schema.Types.ObjectId,
      ref: 'MedicalAndLifeStyle', // Reference to the medicalAndLifeStyle schema
    },
    
    isDeleted: {
      type: Boolean,
      required: [false, 'isDeleted is not required'],
      default: false,
    },
  },
  { timestamps: true }
);

--------------

for these page what are the api endpoint should i make ..
and those endpoint .. what input they take and what result structure they should provide ..

////////
i am working on one method for homepage 

getHomePageDataByDate = catchAsync(async (req: Request, res: Response) => {
    const { date }: any = req.query; // 12-12-2023
    const userId = req.user.userId;

    /**
     * get
     * periodStartDate, periodLength, periodEndDate , avgMenstrualCycleLength
     * expectedPeriodStartDate , predictedOvulationDate,
     *
     * from personalized Journey
     *
     * By date and userId
     */

    /**
     * get
     * menstrualFlow, mood, activity, symptoms, cervicalMucus
     *
     *
     * generate
     * fertilityLevel , cycleDay , phase
     *
     * confusion ... phase ki get korbo naki generate korbo ..
     *
     * from dailyCycleInsights
     *
     * By date and userId
     */

    const personalizedJourney =
      await personalizedJourneyService.getByDateAndUserId(date, userId);
    const dailyCycleInsights =
      await dailyCycleInsightsService.getByDateAndUserId(date, userId);

    console.log('personalizedJourney ðŸ”¥', personalizedJourney);
    console.log('dailyCycleInsights ðŸ”¥', dailyCycleInsights);

    // Step 1: Current Date
    const currentDate = new Date(); // Current date and time

    // const expectedPeriodStartDate = new Date('2025-05-20T00:00:00.000Z');

    // Step 3: Calculate the difference in days
    const daysLeftForNextPeriodStart = differenceInDays(
      personalizedJourney?.expectedPeriodStartDate,
      currentDate
    );

    const daysLeftForNextOvulationDate = differenceInDays(
      personalizedJourney?.predictedOvulationDate,
      currentDate
    );

    console.log(daysLeftForNextPeriodStart: ${daysLeftForNextPeriodStart});
    console.log(
      daysLeftForNextOvulationDate: ${daysLeftForNextOvulationDate}
    );

    // phase , fertility , cycle day ðŸ”¥ egula niye chinta korte hobe ...

    // console.log("cycle day ðŸ”¥", )

    let cycleDay =
      differenceInDays(currentDate, personalizedJourney?.periodStartDate) + 1;

    //  dailyCycleInsights.cycleDay = cycleDay; // can not set cycle day .. because it might be happen that for some day we have not dailyCycleInsight

    // based on avgMenstrualCycleLength and cycle day .. i have to calculate phase and fertility level
    // write a function to calculate phase and fertility level based on cycle day and avgMenstrualCycleLength
    let phase = '';
    let fertilityLevel = '';
    if (cycleDay <= Number(personalizedJourney?.avgMenstrualCycleLength)) {
      phase = 'Follicular Phase';
      if (cycleDay <= 7) {
        fertilityLevel = 'Low';
      } else if (cycleDay <= 14) {
        fertilityLevel = 'Medium';
      } else {
        fertilityLevel = 'High';
      }
    } else if (
      cycleDay <=
      Number(personalizedJourney?.avgMenstrualCycleLength) + 14
    ) {
      phase = 'Ovulatory Phase';
      fertilityLevel = 'High';
    } else {
      phase = 'Luteal Phase';
      if (
        cycleDay <=
        Number(personalizedJourney?.avgMenstrualCycleLength) + 21
      ) {
        fertilityLevel = 'Medium';
      } else {
        fertilityLevel = 'Low';
      }
    }

    // dont need to provide all information .. just selective infomation ..

    let finalData;

    if (personalizedJourney && dailyCycleInsights) {
      finalData = {
        ...personalizedJourney._doc,
        ...dailyCycleInsights._doc,
        cycleDay,
        daysLeftForNextPeriodStart,
        daysLeftForNextOvulationDate,
        phase,
        fertilityLevel,
      };
    } else {
      finalData = {
        ...personalizedJourney._doc,
        // ...dailyCycleInsights._doc,
        cycleDay,
        daysLeftForNextPeriodStart,
        daysLeftForNextOvulationDate,
        phase,
        fertilityLevel,
      };
    }

    res.status(StatusCodes.OK).json({
      success: true,
      code: StatusCodes.OK,
      data: finalData,
      message: 'Fertie Ok successfully',
    });
  });

-------
evaluate this

//TODO : ///////////////////////////////////////////
///////////////////////////////////////////////

i give you those image to understand that i am building a period tracking app .. i am give you also my database .. do you get that

///////////////////////////////////////////////////
/////////////////////////////////////////////////////

// for a period tracking app .. what should be my database looks like 
-----------------------------
const dailyCycleInsightsSchema = new Schema<IDailyCycleInsights>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: [true, 'User Id is required'],
    },

    labTestLogId: {
      type: Schema.Types.ObjectId,
      ref: 'LabTestLog',
      required: [true, 'User Id is required'],
    },
    menstrualFlow: {
      type: String,
      enum: [
        TMenstrualFlow.light,
        TMenstrualFlow.medium,
        TMenstrualFlow.heavy,
        TMenstrualFlow.spotting,
        TMenstrualFlow.no,
      ],
      required: [
        false,
        Menstrual flow is not required it can be ${Object.values(
          TMenstrualFlow
        ).join(', ')},
      ],
    },
    mood: {
      type: String,
      enum: [
        TMood.great,
        TMood.good,
        TMood.relaxed,
        TMood.happy,
        TMood.irritable,
        TMood.indifferent,
      ],
      required: [
        false,
        mood is not required it can be ${Object.values(TMood).join(', ')},
      ],
    },
    activity: {
      type: String,
      enum: [TActivity.intercourse, TActivity.insemination],
      required: [
        false,
        activity is not required it can be ${Object.values(TActivity).join(
          ', '
        )},
      ],
    },
    symptoms: {
      type: [String],
      enum: [
        TSymptoms.cramps,
        TSymptoms.headache,
        TSymptoms.backache,
        TSymptoms.breastTenderness,
        TSymptoms.cervicalMucous,
        TSymptoms.pain,
        TSymptoms.bloating,
        TSymptoms.others,
      ],
      required: [
        false,
        symptoms is not required it can be ${Object.values(TSymptoms).join(
          ', '
        )},
      ],
    },
    phase: {
      // auto calculate .. or chinta korte hobe ..
      type: String,
      enum: [
        TPhase.menstrual,
        TPhase.follicular,
        TPhase.ovulatory,
        TPhase.luteal,
      ],
      required: [
        false,
        phase is not required it can be ${Object.values(TPhase).join(', ')},
      ],
    },
    fertilityLevel: {
      type: String,
      enum: [
        TFertilityLevel.veryHigh,
        TFertilityLevel.medium,
        TFertilityLevel.low,
        TFertilityLevel.veryLow,
      ],
      required: [
        false,
        fertilityLevel is not required it can be ${Object.values(
          TFertilityLevel
        ).join(', ')},
      ],
    },
    cycleDay: {
      type: Number,
      required: [false, 'cycleDay is not required'],
    },
    cervicalMucus: {
      type: String,
      enum: [TCervicalMucus.eggWhite, TCervicalMucus.creamy],
      required: [
        false,
        cervicalMucus is not required it can be ${Object.values(
          TCervicalMucus
        ).join(', ')},
      ],
    },
    date: {
      type: Date,
      required: [true, 'date is required'],
    },
  },
  { timestamps: true }
);

----------------------------
const labTestLogSchema = new Schema<ILabTestLog>(
  {
    follicleStimulatingHormoneTest: {
      type: String,
      required: [false, 'follicleStimulatingHormoneTest is required'],
    },
    luteinizingHormoneTest: {
      type: String,
      required: [false, 'luteinizingHormoneTest is required'],
    },
    estradiolTest: {
      type: String,
      required: [false, 'estradiolTest is required'],
    },
    progesteroneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    antiMullerianHormoneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    thyroidStimulatingHormoneTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    prolactinTest: {
      type: String,
      required: [false, 'progesteroneTest is required'],
    },

    isDeleted: {
      type: Boolean,
      required: [false, 'isDeleted is not required'],
      default: false,
    },
  },
  { timestamps: true }
);

---------------------------------------------
const personalizeJourneySchema = new Schema<IPersonalizeJourney>(
  {
    dateOfBirth: {
      type : Date,
      required : [true, 'dateOfBirth is required']
    },

    // ðŸ”¥ dateOfBirth er upor base kore age calculate korte hobe .. 
    age : {
      type : Number,
      required : [true, 'age is required']
    },
    height : {
      type : Number,
      required : [true, 'height is required']
    },
    heightUnit : {
      type : String,
      enum : [THeightUnit.cm, THeightUnit.inch],
      required : [true, heightUnit is required it can be ${Object.values(THeightUnit).join(', ')} ]
    },
    weight : {
      type : Number,
      required : [true, 'weight is required']
    },
    weightUnit : {
      type : String,
      enum : [TWeightUnit.kg, TWeightUnit.lbs],
      required : [true, weightUnit is required it can be ${Object.values(THeightUnit).join(', ')} ]
    },

    // --------------------------
    tryingToConceive : {
      type : Boolean,
      required : [true, 'tryingToConceive is required'],
      default : false
    },
    areCyclesRegular : {
      type : Boolean,
      required : [true, 'areCycleRegular is required'],
      default : false
    },
    describeFlow : {
      type : String,
      enum : [
        TDescribeFlow.light,
        TDescribeFlow.normal,
        TDescribeFlow.heavy,
      ],
      required: [
        true,
        describeFlow is required it can be ${Object.values(
          TDescribeFlow
        ).join(', ')},
      ],
    },

    // ---------------------------
    periodStartDate : {
      type: Date,
      required: [true, 'periodStartDate is required'],
    },
    periodLength : {
      type: Number,
      required: [true, 'periodLength is required'],
    },
    periodEndDate : { // ðŸ”¥ this needs to be calculated 
      type: Date,
      required: [false, 'periodEndDate is not required'],
    },

    // --------------------------

    avgMenstrualCycleLength : {
      type: Number,
      required: [true, 'avgMenstrualCycleLength is required'],
    },

    // --------------------------  optional 

    trackOvulationBy : {
      type: [String],
      enum: [
        TTrackOvulationBy.ovulationTests,
        TTrackOvulationBy.basalBodyTemp,
        TTrackOvulationBy.cervicalMucus,
        TTrackOvulationBy.progesteroneTesting,
        TTrackOvulationBy.none
      ],
      required: false
    },
    doYouHavePain : {
      type : String,
      enum : [
        TPainType.mild,
        TPainType.moderate,
        TPainType.severe,
        TPainType.no
      ],
      required: [
        false,
        doYouHavePain is required it can be ${Object.values(
          TPainType
        ).join(', ')},
      ],
    },
    // --------------------------

    expectedPeriodStartDate : { // expectedPeriodDate
      type: Date,
      required: [false, 'expectedPeriodDate is not required'],
    },
    predictedOvulationDate: {  // ðŸ”¥ this needs to be calculated 
      type : Date,
      required: [false, 'predictedOvulationDate is not required'],
    },

    // ðŸ”¥ðŸ”¥ ei duitar jonno  Day gula o save kore rakhte hobe kina .. 

    pregnancy_History_Id: {
      type: Schema.Types.ObjectId,
      ref: 'PregnancyHistory', // Reference to the pregnancyHistory schema
    },
    medical_And_LifeStyle_Id: {
      type: Schema.Types.ObjectId,
      ref: 'MedicalAndLifeStyle', // Reference to the medicalAndLifeStyle schema
    },
    
    isDeleted: {
      type: Boolean,
      required: [false, 'isDeleted is not required'],
      default: false,
    },
  },
  { timestamps: true }
);

--------------

for these page what are the api endpoint should i make ..
and those endpoint .. what input they take and what result structure they should provide ..

////////
i am working on one method for homepage 

getHomePageDataByDate = catchAsync(async (req: Request, res: Response) => {
    const { date }: any = req.query; // 12-12-2023
    const userId = req.user.userId;

    /**
     * get
     * periodStartDate, periodLength, periodEndDate , avgMenstrualCycleLength
     * expectedPeriodStartDate , predictedOvulationDate,
     *
     * from personalized Journey
     *
     * By date and userId
     */

    /**
     * get
     * menstrualFlow, mood, activity, symptoms, cervicalMucus
     *
     *
     * generate
     * fertilityLevel , cycleDay , phase
     *
     * confusion ... phase ki get korbo naki generate korbo ..
     *
     * from dailyCycleInsights
     *
     * By date and userId
     */

    const personalizedJourney =
      await personalizedJourneyService.getByDateAndUserId(date, userId);
    const dailyCycleInsights =
      await dailyCycleInsightsService.getByDateAndUserId(date, userId);

    console.log('personalizedJourney ðŸ”¥', personalizedJourney);
    console.log('dailyCycleInsights ðŸ”¥', dailyCycleInsights);

    // Step 1: Current Date
    const currentDate = new Date(); // Current date and time

    // const expectedPeriodStartDate = new Date('2025-05-20T00:00:00.000Z');

    // Step 3: Calculate the difference in days
    const daysLeftForNextPeriodStart = differenceInDays(
      personalizedJourney?.expectedPeriodStartDate,
      currentDate
    );

    const daysLeftForNextOvulationDate = differenceInDays(
      personalizedJourney?.predictedOvulationDate,
      currentDate
    );

    console.log(daysLeftForNextPeriodStart: ${daysLeftForNextPeriodStart});
    console.log(
      daysLeftForNextOvulationDate: ${daysLeftForNextOvulationDate}
    );

    // phase , fertility , cycle day ðŸ”¥ egula niye chinta korte hobe ...

    // console.log("cycle day ðŸ”¥", )

    let cycleDay =
      differenceInDays(currentDate, personalizedJourney?.periodStartDate) + 1;

    //  dailyCycleInsights.cycleDay = cycleDay; // can not set cycle day .. because it might be happen that for some day we have not dailyCycleInsight

    // based on avgMenstrualCycleLength and cycle day .. i have to calculate phase and fertility level
    // write a function to calculate phase and fertility level based on cycle day and avgMenstrualCycleLength
    let phase = '';
    let fertilityLevel = '';
    if (cycleDay <= Number(personalizedJourney?.avgMenstrualCycleLength)) {
      phase = 'Follicular Phase';
      if (cycleDay <= 7) {
        fertilityLevel = 'Low';
      } else if (cycleDay <= 14) {
        fertilityLevel = 'Medium';
      } else {
        fertilityLevel = 'High';
      }
    } else if (
      cycleDay <=
      Number(personalizedJourney?.avgMenstrualCycleLength) + 14
    ) {
      phase = 'Ovulatory Phase';
      fertilityLevel = 'High';
    } else {
      phase = 'Luteal Phase';
      if (
        cycleDay <=
        Number(personalizedJourney?.avgMenstrualCycleLength) + 21
      ) {
        fertilityLevel = 'Medium';
      } else {
        fertilityLevel = 'Low';
      }
    }

    // dont need to provide all information .. just selective infomation ..

    let finalData;

    if (personalizedJourney && dailyCycleInsights) {
      finalData = {
        ...personalizedJourney._doc,
        ...dailyCycleInsights._doc,
        cycleDay,
        daysLeftForNextPeriodStart,
        daysLeftForNextOvulationDate,
        phase,
        fertilityLevel,
      };
    } else {
      finalData = {
        ...personalizedJourney._doc,
        // ...dailyCycleInsights._doc,
        cycleDay,
        daysLeftForNextPeriodStart,
        daysLeftForNextOvulationDate,
        phase,
        fertilityLevel,
      };
    }

    res.status(StatusCodes.OK).json({
      success: true,
      code: StatusCodes.OK,
      data: finalData,
      message: 'Fertie Ok successfully',
    });
  });

-------
evaluate this

//TODO : ///////////////////////////////////////////
///////////////////////////////////////////////

as you know .. from a period tracking app i just take 3 information from a user .. period start date, period length, menstrual cycle length... and base on these 3 information .. i can show a users fertile day, possible mentrual dates based on  period length, and i show these information for current month also .. next 12 month .. 
-----------

as you know already my data structure .. is there any information i should kept into my database or should i make new collection .. what should be my route , controller for that feature .. 