getPredictionsByMonthV2 = catchAsync(async (req: Request, res: Response) => {
    const userId = req.user.userId;
    const month: any = req.query.month; // optional

    const user = await User.findById(userId);

    const journey = await PersonalizeJourney.findById(
      user?.personalize_Journey_Id
    );
    if (!journey) return res.status(404).json({ error: 'Journey not found' });

    const { periodStartDate, periodLength, avgMenstrualCycleLength } = journey;
    const today = new Date();
    const startMonth = month ? new Date(${month}-01) : today;

    const predictions = [];

    for (let i = 0; i < 12; i++) {
      //------------------------------------
      if (!month) {
        return res.status(400).json({ error: 'Month is required' });
      }

      const [year, mon] = month.split('-').map(Number);

      const startDate = new Date(year, mon - 1, 1);
      const endDate = new Date(year, mon, 1); // first day of next month

      const insights = await DailyCycleInsights.find({
        userId,
        date: { $gte: startDate, $lt: endDate },
      }).lean();

      const formattedData: any = {};

      insights.forEach(entry => {
        const dateKey = entry.date
          .toISOString()
          .slice(0, 10)
          .split('-')
          .reverse()
          .join('-'); // DD-MM-YYYY

        // Pick only non-null/undefined fields you care to show
        const { menstrualFlow, phase } = entry;

        formattedData[dateKey] = {};

        if (menstrualFlow) formattedData[dateKey].menstrualFlow = menstrualFlow;
        if (phase) formattedData[dateKey].phase = phase;
      });

      // ----------------------------------

      const predictedStart = new Date(periodStartDate);
      predictedStart.setDate(
        predictedStart.getDate() + i * Number(avgMenstrualCycleLength)
      );

      const predictedEnd = new Date(predictedStart);
      predictedEnd.setDate(predictedEnd.getDate() + Number(periodLength) - 1);

      const ovulation = new Date(predictedStart);
      ovulation.setDate(
        ovulation.getDate() + Math.floor(Number(avgMenstrualCycleLength) / 2)
      );

      const fertileStart = new Date(ovulation);
      fertileStart.setDate(fertileStart.getDate() - 3);

      const fertileEnd = new Date(ovulation);
      fertileEnd.setDate(fertileEnd.getDate() + 1);

      predictions.push({
        month: predictedStart.toISOString().slice(0, 7),
        predictedPeriodStart: predictedStart,
        predictedPeriodEnd: predictedEnd,
        predictedOvulationDate: ovulation,
        fertileWindow: [fertileStart, fertileEnd],
        formattedData,
      });
    }

    res.status(StatusCodes.OK).json({
      success: true,
      code: StatusCodes.OK,
      data: predictions,
      message: 'Fertie Ok successfully',
    });
  });

---------

how about provide 12 month information .. as you provide before .. also include DailyCycleInsight for that month if exist 

//TODO : ChatBot Related ///////////////////////////////////////////
///////////////////////////////////////////////

now i want to add chatbot to this app .. like .. as our database have information about period thing .. so chat bot can say next ovulation date .. or more information .. as we have lab test information and daily cycle insights in database .. based on those information chatbot should notify our user 

- LH is peaking! Time to cue the romance playlist.&quot;
- Progesterone looks solid—you likely ovulated.&quot;
- Your stress is high. Let’s breathe together for a sec, 

-----------

so how to intregate this chat bot thing to our express js server .. i am thinging about langchain and langgraph .. what do you think .. 


//INFO :  https://chatgpt.com/c/681052c3-c980-8000-bff8-330b08eb5b74


npm install langchain openai @langchain/community @langchain/langgraph


import { ChatOpenAI } from 'langchain/chat_models/openai';
import { RunnableSequence } from 'langchain/schema/runnable';
import { formatMessages } from 'langchain/format';
import { z } from 'zod';
import { getDailyInsights, getLabResults, getNextOvulationDate } from '../utils/dataFetchers';

const model = new ChatOpenAI({ temperature: 0.6, modelName: 'gpt-4' });

// This function receives userId and user message
export const chatbotResponse = async (req, res) => {
  const userId = req.user.userId;
  const userMessage = req.body.message;

  const insights = await getDailyInsights(userId);
  const labs = await getLabResults(userId);
  const ovulationDate = await getNextOvulationDate(userId);

  const prompt = `You are a friendly health assistant. Based on user’s current cycle, lab tests, and daily logs, help them.

User said: ${userMessage}

Info you have:
- Next ovulation: ${ovulationDate}
- Latest LH: ${labs?.LH}
- Latest Progesterone: ${labs?.progesterone}
- Daily Mood: ${insights?.mood}
- Menstrual Flow: ${insights?.menstrualFlow}
- Phase: ${insights?.phase}
- Symptoms: ${insights?.symptoms}

Respond kindly.`;

  const chain = RunnableSequence.from([formatMessages, model]);
  const response = await chain.invoke({ input: userMessage, context: prompt });

  res.json({ message: response });
};


router.post('/chatbot', isAuthenticated, chatbotResponse);